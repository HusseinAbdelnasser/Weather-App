{"version":3,"sources":["Components/Form.js","Components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","temperature","city","timezone","pressure","description","error","API_KEY","App","state","countrey","humidity","e","a","preventDefault","target","elements","value","country","fetch","api","json","data","console","log","setState","main","temp","weather","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAiBeA,EAdF,SAAEC,GAEX,OACI,8BACI,uBAAMC,SAAUD,EAAME,WAAtB,UACI,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,uBAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,uDCsCDC,EA7CC,SAACN,GAEb,OACI,sBAAKO,UAAU,OAAf,UAEOP,EAAMQ,aACL,oBAAID,UAAU,WAAd,0BACE,uBAAOA,UAAU,aAAjB,cAAgCP,EAAMQ,YAAtC,UAIHR,EAAMS,MACN,oBAAGF,UAAU,WAAb,mBACI,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMS,KAArC,UAIJT,EAAMU,UACN,oBAAGH,UAAU,WAAb,uBACI,uBAAMA,UAAU,aAAhB,UAA8BP,EAAMU,SAApC,UAIJV,EAAMW,UACN,oBAAGJ,UAAU,WAAb,uBACI,uBAAMA,UAAU,aAAhB,UAA8BP,EAAMW,SAApC,UAIJX,EAAMY,aACL,oBAAGL,UAAU,WAAb,0BACI,uBAAMA,UAAU,aAAhB,UAA8BP,EAAMY,YAApC,UAILZ,EAAMa,OACL,oBAAGN,UAAU,WAAb,oBACG,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMa,MAArC,cClCbC,EAAU,mCA0DDC,E,4MAtDXC,MAAO,CACHR,YAAY,GACZC,KAAK,GACLQ,SAAS,GACTC,SAAS,GACTN,YAAY,GACZC,MAAO,I,EAEXX,W,uCAAa,WAAOiB,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9BC,EAAUN,EAAEG,OAAOC,SAASE,QAAQD,MAHjC,SAISE,MAAM,oDAAD,OAAqDjB,EAArD,YAA6DgB,EAA7D,kBAA8EX,IAJ5F,cAIHa,EAJG,gBAKUA,EAAIC,OALd,OAKHC,EALG,OAMTC,QAAQC,IAAIF,GACTpB,GAAQgB,EACP,EAAKO,SAAS,CACVxB,YAAaqB,EAAKI,KAAKC,KACvBzB,KAAMoB,EAAKzB,KACXM,SAAUmB,EAAKnB,SACfC,SAAUkB,EAAKI,KAAKtB,SACpBC,YAAaiB,EAAKM,QAAQ,GAAGvB,YAC7BC,MAAO,KAGX,EAAKmB,SAAS,CACVxB,YAAY,GACZC,KAAK,GACLC,SAAS,GACTC,SAAS,GACTC,YAAY,GACZC,MAAO,sBAvBN,4C,kGA2Bb,WACI,OACI,qBAAKN,UAAU,UAAf,SACG,sBAAKA,UAAU,iBAAf,UACA,cAAC,EAAD,CAAML,WAAakC,KAAKlC,aACxB,cAAC,EAAD,CACGM,YAAc4B,KAAKpB,MAAMR,YACzBC,KAAO2B,KAAKpB,MAAMP,KAClBC,SAAW0B,KAAKpB,MAAMN,SACtBC,SAAUyB,KAAKpB,MAAML,SACrBC,YAAcwB,KAAKpB,MAAMJ,YACzBC,MAAQuB,KAAKpB,MAAMH,iB,GAhDnBwB,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b2cd7144.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Form = ( props ) => {\r\n    \r\n    return (\r\n        <div>\r\n            <form onSubmit={props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n                <button>Get Weather</button>\r\n            </form>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\n\r\nconst Weather = (props) => {\r\n   \r\n    return (\r\n        <div className=\"info\">\r\n            {\r\n               props.temperature &&\r\n                <p  className=\"info_key\">Temperature : \r\n                  <span  className=\"info_value\"> {props.temperature} </span>\r\n                </p>\r\n            }\r\n            {\r\n               props.city && \r\n               <p className=\"info_key\">City :\r\n                   <span className=\"info_value\"> {props.city} </span>\r\n                </p>\r\n            }\r\n            {\r\n               props.timezone && \r\n               <p className=\"info_key\">Timezone : \r\n                   <span className=\"info_value\">{props.timezone} </span>\r\n                </p>\r\n            }\r\n            {\r\n               props.pressure && \r\n               <p className=\"info_key\">Pressure : \r\n                   <span className=\"info_value\">{props.pressure} </span>\r\n                </p>\r\n            }\r\n            {\r\n               props.description &&\r\n                <p className=\"info_key\">Description : \r\n                    <span className=\"info_value\">{props.description} </span>\r\n                </p>\r\n            }\r\n            {\r\n               props.error &&\r\n                <p className=\"info_key\">Error :\r\n                   <span className=\"info_value\"> {props.error} </span>\r\n                </p>\r\n            }\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Weather;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Form from './Components/Form';\nimport Weather from './Components/Weather';\n\n\nconst API_KEY = \"a76ab423c01ef9303cbff207bb7b8023\";\n// http://api.openweathermap.org/data/2.5/weather?q=cairo%2Cegypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends Component {\n\n    state ={\n        temperature:'',\n        city:'',\n        countrey:'',\n        humidity:'',\n        description:'',\n        error: ''\n    }\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n        const data = await api.json();\n        console.log(data)\n        if(city && country) {\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                timezone: data.timezone,\n                pressure: data.main.pressure,\n                description: data.weather[0].description,\n                error: ''\n            })\n        } else {\n            this.setState({\n                temperature:'',\n                city:'',\n                timezone:'',\n                pressure:'',\n                description:'',\n                error: 'Please Enter Data'\n            })\n        }\n    }\n    render() {\n        return (\n            <div className=\"wrapper\">\n               <div className=\"form-container\">\n               <Form getWeather= {this.getWeather} />\n               <Weather \n                  temperature= {this.state.temperature}\n                  city= {this.state.city}\n                  timezone= {this.state.timezone}\n                  pressure={this.state.pressure}\n                  description= {this.state.description}\n                  error= {this.state.error}\n               />\n               </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}